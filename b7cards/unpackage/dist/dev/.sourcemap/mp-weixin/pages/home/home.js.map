{"version":3,"file":"home.js","sources":["pages/home/home.vue","../../down load/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvaG9tZS9ob21lLnZ1ZQ"],"sourcesContent":["<template>\n  <view class=\"container\">\n\t<button @click=\"SynInformation\" :disabled = \"!canbutton\"> 同步信息 </button>\n\t<button @click=\"gameStart\" :disabled = \"!isConnected && !canbutton\"> 开始游戏 </button>\n    \n    <!-- 出牌权显示 -->\n    <view class=\"turn-section\" v-if=\"gameStatus === 'playing' && currentPlayer\">\n      <view :class=\"['turn-indicator', isYourTurn ? 'your-turn' : 'other-turn']\">\n        <text v-if=\"isYourTurn\" class=\"turn-text\">🎮 轮到您出牌</text>\n        <text v-else class=\"turn-text\">⏳ 轮到玩家 {{ currentPlayer }} 出牌</text>\n      </view>\n    </view>\n    \n    <!-- 牌堆显示 -->\n    <view class=\"piles-section\" v-if=\"gamePiles\">\n      <h3>牌堆</h3>\n      <view class=\"piles-container\">\n        <view v-for=\"(pile, suit) in gamePiles\" :key=\"suit\" class=\"pile-item\">\n          <view :class=\"['pile', 'pile-' + suit]\">\n            <text class=\"pile-suit\">{{ getSuitSymbol(suit) }}</text>\n            <text class=\"pile-count\">{{ pile.count }}张</text>\n            \n            <!-- 显示完整的牌堆序列 -->\n            <view class=\"pile-cards\" v-if=\"pile.cards && pile.cards.length > 0\">\n              <view class=\"pile-sequence\">\n                <text class=\"pile-sequence-label\">牌堆序列:</text>\n                <view class=\"card-sequence\">\n                  <text \n                    v-for=\"(entry, index) in pile.cards\" \n                    :key=\"index\"\n                    :class=\"['sequence-card', entry.card.rank === '7' ? 'seven-card' : '']\"\n                  >\n                    {{ entry.card.rank }}{{ getSuitSymbol(entry.card.suit) }}\n                    <span v-if=\"index < pile.cards.length - 1\">→</span>\n                  </text>\n                </view>\n              </view>\n            </view>\n            \n            <text v-else class=\"pile-empty\">空</text>\n            <text v-if=\"pile.playedBy\" class=\"pile-player\">\n              最后出牌: {{ pile.playedBy }}\n            </text>\n          </view>\n        </view>\n      </view>\n    </view>\n    \n    <!-- 玩家列表 -->\n    <view class=\"player-section\">\n      <h3>在线玩家 ({{ playerlist.length }})</h3>\n      <ul>\n        <li v-for=\"(item, index) in playerlist\" :key=\"index\">\n          玩家{{ index+1 }}: {{ item.deviceId || item }}\n        </li>\n      </ul>\n    </view>\n    \n    <!-- 玩家手牌 -->\n    <view class=\"cards-section\" v-if=\"playerCards.length > 0\">\n      <h3>你的手牌 ({{ playerCards.length }}张)</h3>\n      \n      <!-- 选中的牌 -->\n      <view class=\"selected-section\" v-if=\"selectedCard\">\n        <h4>已选牌</h4>\n        <view class=\"selected-cards\">\n          <view class=\"card-item\">\n            <view :class=\"['card', 'card-' + selectedCard.suit, 'selected']\">\n              <text class=\"card-rank\">{{ selectedCard.rank }}</text>\n              <text class=\"card-suit\">{{ getSuitSymbol(selectedCard.suit) }}</text>\n            </view>\n          </view>\n        </view>\n        <view class=\"action-buttons\">\n          <button @click=\"playCard\" class=\"play-btn\">出牌</button>\n          <button @click=\"clearSelection\" class=\"clear-btn\">取消选择</button>\n        </view>\n        \n        <!-- Pass按钮 -->\n        <view class=\"pass-section\" v-if=\"isYourTurn && gameStatus === 'playing'\">\n          <button @click=\"passTurn\" class=\"pass-btn\" :disabled=\"!canPass\">\n            Pass\n          </button>\n          <text v-if=\"!canPass\" class=\"pass-hint\">\n            {{ passHint }}\n          </text>\n        </view>\n      </view>\n      \n      <!-- 所有手牌 -->\n      <view class=\"cards-container\">\n        <view v-for=\"(card, index) in playerCards\" :key=\"index\" class=\"card-item\">\n          <view \n            :class=\"['card', 'card-' + card.suit, selectedCard && selectedCard.id === card.id ? 'selected' : '']\"\n            @click=\"selectCard(card)\"\n          >\n            <text class=\"card-rank\">{{ card.rank }}</text>\n            <text class=\"card-suit\">{{ getSuitSymbol(card.suit) }}</text>\n            <text v-if=\"selectedCard && selectedCard.id === card.id\" class=\"selected-mark\">✓</text>\n          </view>\n        </view>\n      </view>\n    </view>\n    \n  </view>\n</template>\n\n<script>\n\n\nconst app = getApp();\nexport default {\n  \n\tdata(){\n\t\treturn{\n\t\t\tcanbutton : false,\n\t\t\tisConnected : false ,\n\t\t\tplayerlist:[],\n\t\t\tplayerCards: [],\n\t\t\tselectedCard: null, // 选中的单张牌\n\t\t\tgameStatus: 'waiting', // waiting, playing, ended\n\t\t\tgamePiles: {\n\t\t\t\thearts: { suit: 'hearts', count: 0, topCard: null, playedBy: null, cards: [] },\n\t\t\t\tspades: { suit: 'spades', count: 0, topCard: null, playedBy: null, cards: [] },\n\t\t\t\tdiamonds: { suit: 'diamonds', count: 0, topCard: null, playedBy: null, cards: [] },\n\t\t\t\tclubs: { suit: 'clubs', count: 0, topCard: null, playedBy: null, cards: [] }\n\t\t\t},\n\t\t\tcurrentPlayer: null, // 当前出牌玩家\n\t\t\tisYourTurn: false, // 是否轮到当前玩家出牌\n\t\t\tcanPass: false, // 是否可以pass\n\t\t\tpassHint: '' // pass提示信息\n\t\t}\n\t},\n  onLoad(){\n    this.setupWebSocketListener();\n  },\n  methods: {\n    setupWebSocketListener() {\n      if (app.globalData.socketTask && app.globalData.isConnected) {\n\t\t  console.log(\"监听器设置成功\")\n\t\t  this.canbutton = true;\n        // 设置消息监听器\n        app.globalData.socketTask.onMessage((res) => {\n          console.log('Home页面收到WebSocket消息:', res);\n          \n          try {\n            // 解析JSON消息\n            const messageData = JSON.parse(res.data);\n            if(messageData.type == 'syninformation'){\n\t\t\t\tconsole.log(\"进入到同步数组if\")\n              this.playerlist = messageData.content;\n            }\n         //----------分割每一条消息处理\n\t\t //处理开始游戏后的消息处理\n\t\t\tif(messageData.type == 'alert'){\n\t\t\t\tconsole.log(messageData.content)\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle:messageData.content,\n\t\t\t\t\ticon:'error',\n\t\t\t\t\tduration:2000\n\t\t\t\t})\n\t\t\t}\n\t\t\tif(messageData.type == \"gameStartRes\"){\n\t\t\t\tconsole.log(\"收到游戏开始响应，手牌信息:\", messageData.content);\n\t\t\t\tthis.playerCards = messageData.content.playerCards || [];\n\t\t\t\tthis.gameStatus = 'playing';\n\t\t\t\tthis.selectedCard = null;\n\t\t\t\t// 初始化牌堆\n\t\t\t\tthis.gamePiles = {\n\t\t\t\t\thearts: { suit: 'hearts', count: 0, topCard: null, playedBy: null, cards: [] },\n\t\t\t\t\tspades: { suit: 'spades', count: 0, topCard: null, playedBy: null, cards: [] },\n\t\t\t\t\tdiamonds: { suit: 'diamonds', count: 0, topCard: null, playedBy: null, cards: [] },\n\t\t\t\t\tclubs: { suit: 'clubs', count: 0, topCard: null, playedBy: null, cards: [] }\n\t\t\t\t};\n\t\t\t\t// 设置当前出牌玩家\n\t\t\t\tthis.currentPlayer = messageData.content.currentPlayer;\n\t\t\t\tthis.isYourTurn = messageData.content.isYourTurn;\n\t\t\t\t// 检查是否可以Pass\n\t\t\t\tthis.checkCanPass();\n\t\t\t\t\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: `游戏开始！获得${this.playerCards.length}张牌`,\n\t\t\t\t\ticon: 'success',\n\t\t\t\t\tduration: 2000\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// 处理牌堆更新消息\n\t\t\tif(messageData.type == \"pileUpdate\"){\n\t\t\t\tconsole.log(\"收到牌堆更新消息:\", messageData.content);\n\t\t\t\tthis.gamePiles = messageData.content.pileInfo;\n\t\t\t\t\n\t\t\t\t// 更新当前出牌玩家\n\t\t\t\tif(messageData.content.currentPlayer) {\n\t\t\t\t\tthis.currentPlayer = messageData.content.currentPlayer;\n\t\t\t\t\tthis.isYourTurn = this.currentPlayer === app.globalData.diviceid;\n\t\t\t\t\t// 检查是否可以Pass\n\t\t\t\t\tthis.checkCanPass();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 更新玩家手牌数量\n\t\t\t\tif(messageData.content.remainingCards !== undefined) {\n\t\t\t\t\t// 如果是当前玩家的出牌，更新手牌\n\t\t\t\t\tif(messageData.content.playedBy === app.globalData.diviceid) {\n\t\t\t\t\t\tthis.playerCards = this.playerCards.filter(card => \n\t\t\t\t\t\t\tcard.id !== messageData.content.playedCard.id\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.selectedCard = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 处理出牌成功消息\n\t\t\tif(messageData.type == \"playCardSuccess\"){\n\t\t\t\tconsole.log(\"出牌成功:\", messageData.content);\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: messageData.content,\n\t\t\t\t\ticon: 'success',\n\t\t\t\t\tduration: 2000\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// 处理出牌失败消息\n\t\t\tif(messageData.type == \"playCardFail\"){\n\t\t\t\tconsole.log(\"出牌失败:\", messageData.content);\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: messageData.content,\n\t\t\t\t\ticon: 'error',\n\t\t\t\t\tduration: 2000\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// 处理Pass成功消息\n\t\t\tif(messageData.type == \"passSuccess\"){\n\t\t\t\tconsole.log(\"Pass成功:\", messageData.content);\n\t\t\t\t\n\t\t\t\t// 更新当前出牌玩家\n\t\t\t\tif(messageData.content.nextPlayer) {\n\t\t\t\t\tthis.currentPlayer = messageData.content.nextPlayer;\n\t\t\t\t\tthis.isYourTurn = this.currentPlayer === app.globalData.diviceid;\n\t\t\t\t\t// 检查是否可以Pass\n\t\t\t\t\tthis.checkCanPass();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: messageData.content.message,\n\t\t\t\t\ticon: 'success',\n\t\t\t\t\tduration: 2000\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// 处理Pass失败消息\n\t\t\tif(messageData.type == \"passFail\"){\n\t\t\t\tconsole.log(\"Pass失败:\", messageData.content);\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: messageData.content,\n\t\t\t\t\ticon: 'error',\n\t\t\t\t\tduration: 2000\n\t\t\t\t});\n\t\t\t}\n\t\t \n\t\t  } catch (error) {\n            console.error('消息解析失败:', error, '原始数据:', res.data);\n            // 处理非JSON格式消息\n            \n          }\n        });\n        \n        this.isListening = true;\n        console.log('Home页面WebSocket监听器已设置');\n      } else {\n        console.log('WebSocket未连接，无法设置监听器');\n        // 可以设置定时器重试\n        setTimeout(() => {\n          this.setupWebSocketListener();\n        }, 2000);\n      }\n    },\n    SynInformation(){\n\t\tconsole.log(\"是否成功连接\" + app.globalData.isConnected);\n\t\tconsole.log(\"socketTask:\" + app.globalData.socketTask);\n      if (app.globalData.isConnected && app.globalData.socketTask) {\n\t\t\t\t\tconst message = {\n\t\t\t\t\t\ttype: 'system',\n\t\t\t\t\t\treqmethoud : 'syninformation',\n\t\t\t\t\t\tplayerid : app.globalData.diviceid,\n            \n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tapp.globalData.socketTask.send({\n\t\t\t\t\t\tdata: JSON.stringify(message),\n\t\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\t\t//----------在连接成功的回调中设置监听函数-------------------------\n\t\t\t\t\t\t\tthis.isConnected = true\n\t\t\t\t\t\t\tconsole.log('同步信息成功');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfail: (err) => {\n\t\t\t\t\t\t\tconsole.error('同步用户信息失败:', err);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: 'WebSocket未连接',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n    },\n    gameStart(){\n\t\tconst message = {\n\t\t\ttype: 'gameStart',\n\t\t\treqmethoud : 'user',\n\t\t\tplayerid : app.globalData.diviceid,\n\t\t            };\n\t\t\tapp.globalData.socketTask.send({\n\t\t\t\tdata: JSON.stringify(message),\n\t\t\t\tsuccess: () => {\n\t\t\t\t\t//----------在连接成功的回调中设置监听函数-------------------------\n\t\t\t\t\tthis.isConnected = true\n\t\t\t\t\tconsole.log('发送开始游戏请求');\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\tfail: (err) => {\n\t\t\t\t\tconsole.error('发送卡开始请求失败:', err);\n\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\t\t\n\t},\n    getSuitSymbol(suit) {\n      switch(suit) {\n        case 'hearts': return '♥';\n        case 'spades': return '♠';\n        case 'clubs': return '♣';\n        case 'diamonds': return '♦';\n        default: return suit;\n      }\n    },\n    // 选择单张牌\n    selectCard(card) {\n      if (this.selectedCard && this.selectedCard.id === card.id) {\n        // 如果点击的是已选中的牌，则取消选择\n        this.selectedCard = null;\n      } else {\n        // 选择新的牌\n        this.selectedCard = card;\n      }\n    },\n    // 取消选择\n    clearSelection() {\n      this.selectedCard = null;\n    },\n    // 出牌\n    playCard() {\n      if (!this.selectedCard) {\n        uni.showToast({\n          title: '请先选择要出的牌',\n          icon: 'none',\n          duration: 2000\n        });\n        return;\n      }\n      \n      console.log('出牌:', this.selectedCard);\n      \n      // 发送出牌消息到服务器\n      const message = {\n        type: 'playCard',\n        playerid: app.globalData.diviceid,\n        card: this.selectedCard,\n\t\t\n      };\n      \n      app.globalData.socketTask.send({\n        data: JSON.stringify(message),\n        success: () => {\n          console.log('出牌请求发送成功，等待服务器验证');\n          // 不再立即移除手牌，等待服务器确认\n          // 手牌移除和牌堆更新将在收到服务器确认消息后处理\n        },\n        fail: (err) => {\n          console.error('出牌请求发送失败:', err);\n          uni.showToast({\n            title: '出牌请求发送失败',\n            icon: 'none',\n            duration: 2000\n          });\n        }\n      });\n    },\n    \n    // Pass操作\n    passTurn() {\n      if (!this.isYourTurn) {\n        uni.showToast({\n          title: '现在不是你的回合',\n          icon: 'none',\n          duration: 2000\n        });\n        return;\n      }\n      \n      console.log('玩家选择Pass');\n      \n      // 发送Pass消息到服务器\n      const message = {\n        type: 'passTurn',\n        playerid: app.globalData.diviceid\n      };\n      \n      app.globalData.socketTask.send({\n        data: JSON.stringify(message),\n        success: () => {\n          console.log('Pass请求发送成功');\n        },\n        fail: (err) => {\n          console.error('Pass请求发送失败:', err);\n          uni.showToast({\n            title: 'Pass请求发送失败',\n            icon: 'none',\n            duration: 2000\n          });\n        }\n      });\n    },\n    \n    // 检查是否可以Pass\n    checkCanPass() {\n      if (!this.isYourTurn || this.gameStatus !== 'playing') {\n        this.canPass = false;\n        this.passHint = '';\n        return;\n      }\n      \n      // 检查是否有7在手牌中\n      const hasSeven = this.playerCards.some(card => card.rank === '7');\n      \n      // 检查是否有可以出的牌\n      const canPlayAnyCard = this.checkCanPlayAnyCard();\n      \n      if (hasSeven) {\n        // 有7在手牌中，不能Pass\n        this.canPass = false;\n        this.passHint = '手中有7，必须先出7';\n      } else if (canPlayAnyCard) {\n        // 有可以出的牌，可以Pass但提示\n        this.canPass = true;\n        this.passHint = '有牌可出，确定要Pass吗？';\n      } else {\n        // 没有可以出的牌，可以Pass\n        this.canPass = true;\n        this.passHint = '没有可以出的牌';\n      }\n    },\n    \n    // 检查是否有可以出的牌\n    checkCanPlayAnyCard() {\n      for (const card of this.playerCards) {\n        // 检查是否可以出到对应花色的牌堆\n        if (this.canPlayCardToPile(card)) {\n          return true;\n        }\n      }\n      return false;\n    },\n    \n    // 检查单张牌是否可以出到牌堆\n    canPlayCardToPile(card) {\n      const pile = this.gamePiles[card.suit];\n      \n      if (!pile) return false;\n      \n      // 如果牌堆为空，只能出7\n      if (pile.count === 0) {\n        return card.rank === '7';\n      }\n      \n      // 获取牌堆的队尾和队头\n      const tailCard = pile.cards[pile.cards.length - 1]?.card;\n      const headCard = pile.cards[0]?.card;\n      \n      if (!tailCard || !headCard) return false;\n      \n      const cardValue = this.getCardValue(card.rank);\n      const tailCardValue = this.getCardValue(tailCard.rank);\n      const headCardValue = this.getCardValue(headCard.rank);\n      \n      // 检查是否可以接在队尾（向上接龙）或队头（向下接龙）\n      const canPlayToTail = Math.abs(cardValue - tailCardValue) === 1;\n      const canPlayToHead = Math.abs(cardValue - headCardValue) === 1;\n      \n      return canPlayToTail || canPlayToHead;\n    },\n    \n    // 获取牌面值\n    getCardValue(rank) {\n      switch(rank) {\n        case 'A': return 1;\n        case 'J': return 11;\n        case 'Q': return 12;\n        case 'K': return 13;\n        default: return parseInt(rank);\n      }\n    }\n    // goToTest() {\n    //   uni.navigateTo({\n    //     url: '/pages/index/index'\n    //   });\n    // }\n  }\n}\n</script>\n\n<style>\n.container {\n  padding: 20px;\n}\n.title {\n  font-size: 24px;\n  font-weight: bold;\n}\n\n.player-section {\n  margin: 20px 0;\n  padding: 15px;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.player-section h3 {\n  margin-bottom: 10px;\n  color: #333;\n}\n\n.cards-section {\n  margin: 20px 0;\n  padding: 15px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n}\n\n.cards-section h3 {\n  margin-bottom: 15px;\n  color: #333;\n}\n\n.cards-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.card-item {\n  width: 60px;\n  height: 80px;\n}\n\n.card {\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.card.selected {\n  border: 2px solid #007AFF;\n  background-color: #f0f8ff;\n  transform: translateY(-5px);\n  box-shadow: 0 4px 8px rgba(0,122,255,0.3);\n}\n\n.card-hearts {\n  color: #e74c3c;\n  border-color: #e74c3c;\n}\n\n.card-diamonds {\n  color: #e74c3c;\n  border-color: #e74c3c;\n}\n\n.card-spades {\n  color: #2c3e50;\n  border-color: #2c3e50;\n}\n\n.card-clubs {\n  color: #2c3e50;\n  border-color: #2c3e50;\n}\n\n.card-rank {\n  font-size: 16px;\n  font-weight: bold;\n}\n\n.card-suit {\n  font-size: 20px;\n  margin-top: 5px;\n}\n\n.selected-mark {\n  position: absolute;\n  top: 2px;\n  right: 2px;\n  color: #007AFF;\n  font-weight: bold;\n  font-size: 12px;\n}\n\n.selected-section {\n  margin-bottom: 20px;\n  padding: 15px;\n  background-color: #e8f4fd;\n  border-radius: 8px;\n  border: 1px solid #007AFF;\n}\n\n.selected-section h4 {\n  margin-bottom: 10px;\n  color: #007AFF;\n}\n\n.selected-cards {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 15px;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 10px;\n}\n\n.play-btn {\n  background-color: #007AFF;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n.clear-btn {\n  background-color: #ff6b6b;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n/* Pass按钮样式 */\n.pass-section {\n  margin-top: 15px;\n  padding: 15px;\n  background-color: #fff3cd;\n  border-radius: 8px;\n  border: 1px solid #ffeaa7;\n  text-align: center;\n}\n\n.pass-btn {\n  background-color: #ffc107;\n  color: #856404;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 25px;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(255, 193, 7, 0.3);\n}\n\n.pass-btn:disabled {\n  background-color: #e0e0e0;\n  color: #9e9e9e;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n.pass-btn:not(:disabled):hover {\n  background-color: #ffb300;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(255, 193, 7, 0.4);\n}\n\n.pass-hint {\n  display: block;\n  margin-top: 8px;\n  font-size: 12px;\n  color: #856404;\n  font-style: italic;\n}\n\n/* 出牌权显示样式 */\n.turn-section {\n  margin: 20px 0;\n  padding: 15px;\n  border-radius: 8px;\n  text-align: center;\n}\n\n.turn-indicator {\n  padding: 12px 20px;\n  border-radius: 25px;\n  font-size: 16px;\n  font-weight: bold;\n  transition: all 0.3s ease;\n}\n\n.your-turn {\n  background-color: #4CAF50;\n  color: white;\n  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);\n  animation: pulse 2s infinite;\n}\n\n.other-turn {\n  background-color: #ff9800;\n  color: white;\n  box-shadow: 0 2px 4px rgba(255, 152, 0, 0.3);\n}\n\n.turn-text {\n  font-size: 16px;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n}\n\n/* 牌堆样式 */\n.piles-section {\n  margin: 20px 0;\n  padding: 15px;\n  background-color: #f0f8ff;\n  border-radius: 8px;\n  border: 1px solid #007AFF;\n}\n\n.piles-section h3 {\n  margin-bottom: 15px;\n  color: #007AFF;\n}\n\n.piles-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 15px;\n}\n\n.pile-item {\n  display: flex;\n  justify-content: center;\n}\n\n.pile {\n  width: 120px;\n  height: 100px;\n  border: 2px solid #ccc;\n  border-radius: 8px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 10px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  transition: all 0.3s ease;\n}\n\n.pile-hearts {\n  border-color: #e74c3c;\n  background-color: #ffeaea;\n}\n\n.pile-diamonds {\n  border-color: #e74c3c;\n  background-color: #ffeaea;\n}\n\n.pile-spades {\n  border-color: #2c3e50;\n  background-color: #f0f0f0;\n}\n\n.pile-clubs {\n  border-color: #2c3e50;\n  background-color: #f0f0f0;\n}\n\n.pile-suit {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.pile-count {\n  font-size: 12px;\n  color: #666;\n  margin-bottom: 3px;\n}\n\n.pile-top-card {\n  font-size: 14px;\n  font-weight: bold;\n  margin-bottom: 3px;\n}\n\n.pile-empty {\n  font-size: 12px;\n  color: #999;\n  font-style: italic;\n}\n\n.pile-player {\n  font-size: 10px;\n  color: #888;\n  text-align: center;\n}\n\n/* 牌堆序列样式 */\n.pile-cards {\n  margin-top: 8px;\n  width: 100%;\n}\n\n.pile-sequence {\n  text-align: center;\n}\n\n.pile-sequence-label {\n  font-size: 10px;\n  color: #666;\n  display: block;\n  margin-bottom: 3px;\n}\n\n.card-sequence {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 2px;\n  font-size: 10px;\n}\n\n.sequence-card {\n  background-color: rgba(255, 255, 255, 0.8);\n  padding: 1px 3px;\n  border-radius: 2px;\n  border: 1px solid #ddd;\n}\n\n.seven-card {\n  background-color: #ffeb3b;\n  font-weight: bold;\n  border-color: #ff9800;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  padding: 5px 0;\n  border-bottom: 1px solid #eee;\n}\n</style>","import MiniProgramPage from 'E:/mino7/b7cards/pages/home/home.vue'\nwx.createPage(MiniProgramPage)"],"names":["uni"],"mappings":"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"}